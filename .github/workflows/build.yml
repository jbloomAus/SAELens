name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Allow this workflow to be called from other workflows
  workflow_call:
    inputs:
      #  Requires at least one input to be valid, but in practice we don't need any
      dummy:
        type: string
        required: false

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache Huggingface assets
        uses: actions/cache@v4
        with:
          key: huggingface-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          path: ~/.cache/huggingface
          restore-keys: |
            huggingface-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local  # the path depends on the OS
          key: poetry-${{ runner.os }}-${{ matrix.python-version }}-0  # increment to reset cache
      - name: Install Poetry
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
      - name: Lint with flake8
        run: poetry run flake8 .
      - name: black code formatting
        run: poetry run black . --check
      - name: isort linting
        run: poetry run isort . --check-only --diff
      - name: type checking
        run: poetry run pyright
      - name: Run Unit Tests
    #   Would use make, but want cov report in xml format
        run: poetry run pytest -v --cov=sae_lens/training/ --cov-report=term-missing --cov-branch tests/unit --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: jbloomAus/SAELens

  release:

    needs: build
    permissions:
      contents: write
      id-token: write
    # https://github.community/t/how-do-i-specify-job-dependency-running-in-another-workflow/16482
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'chore(release):')
    runs-on: ubuntu-latest
    concurrency: release
    environment:
      name: pypi

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Semantic Release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.0.7
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'
      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@main
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}